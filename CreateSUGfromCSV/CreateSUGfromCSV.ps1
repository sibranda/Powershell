<#

	This Script create a New SUG from a .CSV file with the ArticleIDs for the follow products:
	"Windows 7", "Windows 8.1", "Windows 10", "Windows 10, version 1903 and later", "Windows Server 2003", "Windows Server 2008", "Windows Server 2008 R2", "Windows Server 2012", "Windows Server 2012 R2", "Windows Server 2016", "Windows Server 2019", "Office 2007", "Office 2010", "Office 2013", "Office 2016", "Office 2019"
**	You need run from Configuration Manager Console Powershell
	You need enter the parameters

	Example:
	.\CreateSUGfromCSV.ps1 -SiteServer ConfigMgrSERVER01 -SiteCode 'S01' -GroupName "NEWSUG SERVER GROUP" -Products "Windows Server 2008","Windows Server 2012" -FileCSV D:\Temp\ArticleIds.csv

	Default the script doesnt search for ITANIUM if you need ITANIUM Updates use '-Itanium YES'
	.\CreateSUGfromCSV.ps1 -SiteServer ConfigMgrSERVER01 -SiteCode 'S01' -GroupName "NEWSUG SERVER ITANIUM UPs" -Products "Windows Server 2012" -Itanium YES -FileCSV D:\Temp\ArticleIdsItanium_Ups.csv
	
	Example from CSV File:
	ArticleID
	2972106
	2072106
	3097994

	Author: Sidnei Brandao
	Modern IT ܀ Intune ܀ Endpoint ConfigMgr
#>

[CmdletBinding(SupportsShouldProcess=$true)]
param(
    [parameter(Mandatory=$true, HelpMessage="ConfigMgr Site server")]
    [ValidateNotNullOrEmpty()]
    [ValidateScript({Test-Connection -ComputerName $_ -Count 1 -Quiet})]
    [string]$SiteServer,
	
	[parameter(Mandatory=$true, HelpMessage="ConfigMgr Site Code")]
	[ValidateNotNullOrEmpty()]
	[string]$SiteCode,

    [parameter(Mandatory=$true, HelpMessage="Name of Software Update Group.")]
    [ValidateNotNullOrEmpty()]
    [string]$GroupName,

    [parameter(Mandatory=$true, HelpMessage="Name of Products for search updates.")]
    [ValidateNotNullOrEmpty()]
    [ValidateSet("Windows 7", "Windows 8.1", "Windows 10", "Windows 10, version 1903 and later", "Windows Server 2003", "Windows Server 2008", "Windows Server 2008 R2", "Windows Server 2012", "Windows Server 2012 R2", "Windows Server 2016", "Windows Server 2019", "Office 2007", "Office 2010", "Office 2013", "Office 2016", "Office 2019")]
    [string[]]$Products,
	
	[parameter(HelpMessage="Specify Itanium YES or NO")]
    [ValidateNotNullOrEmpty()]
    [ValidateSet("Yes", "No")]
	[string[]]$Itanium,
	
	[parameter(Mandatory=$true, HelpMessage="CSV File Path with ArticleIDs")]
    [ValidateNotNullOrEmpty()]
    [string]$FileCSV
)

Process {
	$ArticleIDs = Import-Csv $FileCSV
   
    function New-SoftwareUpdateGroupList {
        param(
            [parameter(Mandatory=$true)]
            [ValidateNotNullOrEmpty()]
            [string]$SoftwareUpdateGroupName,
            [parameter(Mandatory=$false)]
            [System.Collections.ArrayList]$UpdatesList
        )

        $LocalProp = ([WmiClass]"\\$($SiteServer)\root\SMS\site_$($SiteCode):SMS_CI_LocalizedProperties").CreateInstance()
        $LocalProp.DisplayName = $SoftwareUpdateGroupName
        $LocalProp.Description = "Generated by script"
        $LocalProp.LocaleID = 1033

        $AuthorizationListArguments = @{
            LocalizedInformation = [array]$LocalProp
        }

        try {
            Set-WmiInstance -Namespace "root\SMS\site_$($SiteCode)" -Class SMS_AuthorizationList -ComputerName $SiteServer -Arguments $AuthorizationListArguments -ErrorAction Stop | Out-Null
        }
        catch [System.Exception] {
            Write-Warning -Message "Unable to create '$($SoftwareUpdateGroupName)' software update group, breaking build operation. Line: $($_.InvocationInfo.ScriptLineNumber)" ; break
        }

        $SoftwareUpdateGroup = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Class SMS_AuthorizationList -ComputerName $SiteServer -Filter "LocalizedDisplayName like '$($SoftwareUpdateGroupName)'" -ErrorAction Stop

        if ($SoftwareUpdateGroup -ne $null) {
            $SoftwareUpdateGroup.Get()
            $SoftwareUpdateGroup.Updates = $UpdatesList
            $SoftwareUpdateGroup.Put() | Out-Null
        }

    }

    $ProductsTable = @{}
    $ProductObjects = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Class SMS_CategoryInstance -Filter "CategoryTypeName like 'Product' AND LocalizedCategoryInstanceName not like 'Windows Live' AND LocalizedCategoryInstanceName not like 'Visual Studio 2010 Tools for Office Runtime'"
    foreach ($ProductObject in $ProductObjects) {
        $ProductsTable.Add($ProductObject.LocalizedCategoryInstanceName, $ProductObject.CategoryInstance_UniqueID)
    }

    $Query = "SELECT SMS_SoftwareUpdate.* FROM SMS_SoftwareUpdate WHERE (SMS_SoftwareUpdate.CI_ID NOT IN (SELECT CI_ID FROM SMS_CIAllCategories WHERE CategoryInstance_UniqueID='UpdateClassification:3689bdc8-b205-4af4-8d4a-a63924c5e9d5'))"
	$count = 0
    $Query = -join @($Query, " AND ")
	if ($ArticleIDs.Count -gt 1){
		$Query = -join @($Query, "ArticleID in (")
		foreach ($ArticleID in $ArticleIDs) {
			$ArticleIDTemp = $ArticleID.ArticleID
			$count++
			if ($count -lt $ArticleIDs.Count) {
				$Query = -join @($Query, "'$ArticleIDTemp', ")
			}
			else {
				$Query = -join @($Query, "'$ArticleIDTemp')")
			}
		}
	}
	else {
		$ArticleIDTemp = $ArticleIDs.ArticleID
		$Query = -join @($Query, "ArticleID = '$ArticleIDTemp'")
	}
    
	if (!($Itanium -eq "YES")){
		$Query = -join @($Query, " AND  LocalizedDisplayName NOT LIKE '%Itanium%' ")
	}

    $Query = -join @($Query, " AND (IsExpired ='0' ) AND ")

    $count = 0
    $Query = -join @($Query, "( ")

    foreach ($Product in $Products) {
        $count++
        if ($count -lt $Products.Count) {
            $Query = -join @($Query, "CI_ID in (select CI_ID from SMS_CIAllCategories where CategoryInstance_UniqueID='$($ProductsTable[$Product])') OR ")
        }
        else {
            $Query = -join @($Query, "CI_ID in (select CI_ID from SMS_CIAllCategories where CategoryInstance_UniqueID='$($ProductsTable[$Product])')")
        }
    }

$Query = -join @($Query, " )")
	Function checkSUG()
	{
		$UpdatesGroups = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Class SMS_AuthorizationList -ErrorAction 'Stop' | Select LocalizedDisplayName
		Foreach($UpdateGroup in $UpdatesGroups){
			if ($UpdateGroup.LocalizedDisplayName -eq $GroupName){
				Return $True; break
			}
		}
	}
	
	if (!(checkSUG)){
		$SoftwareUpdates = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Query $Query
		Write-Host "Found" $SoftwareUpdates.count "Updates"
		if ($SoftwareUpdates -ne $null) {
			if (($SoftwareUpdates | Measure-Object).Count -eq 1 ) {
			$UpdateList = New-Object -TypeName System.Collections.ArrayList
			$UpdateList.Add($SoftwareUpdates.CI_ID) | Out-Null
			New-SoftwareUpdateGroupList -SoftwareUpdateGroupName $GroupName -UpdatesList $UpdateList
			}
			else {
				New-SoftwareUpdateGroupList -SoftwareUpdateGroupName $GroupName -UpdatesList $SoftwareUpdates.CI_ID
			}
		}
		else {
			Write-Warning -Message "Specified search did not return any Software Updates"
		}
	}
	else {
		Write-Host "Update Group: '$GroupName' already Exist, please change GroupName"
	}
	Write-Host "Done!"
}